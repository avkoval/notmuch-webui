
Notmuch WebUI - an interface to [[https://notmuchmail.org][notmuch]] mail indexing system.

** Motivation
:PROPERTIES:
:CUSTOM_ID: motiv
:END:

I am a user of ~notmuch~, but I am experiencing some issues with HTML rendering in [[https://www.gnu.org/software/emacs/][Emacs]]. I have tried several
clients from https://notmuchmail.org/frontends/ but have not found a fully satisfying experience. And so I decided
to give it a try and develop an own Web based frontend.

So, I am doing this to:

 - Because it is good practice called: [[https://en.wikipedia.org/wiki/Eating_your_own_dog_food]["Eating your own dog food"]] - I am heavy user of my own
   product, which should lead to good experience for me and others.
 - To try new technology (e.g. [[https://data-star.dev][data-*]] - which is *excellent* and *inspiring*!)
 - To showcase that _I can develop in_ Clojure ([[https://www.linkedin.com/in/avkoval/][to potential employers]]), I have tried in the past to switch to being a
   Clojure developer. However, it seems that most companies are looking for ~mid-level~ developers, so I need to gain
   experience on my own before applying again.
 - Because it is fun!

** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:

*** Dev mode
:PROPERTIES:
:CUSTOM_ID: dev-mode
:END:

    #+begin_example
    clj -M:dev
    #+end_example

** Status (of Alpha version) [35%]
   :PROPERTIES:
   :COOKIE_DATA: recursive
   :END:

 1. [X] Project setup
 2. [-] Messages list & search  ~WIP~
    - [X] List messages
    - [X] Paginator
      - [X] Set limit (~+~ and ~-)
      - [X] Keyboard navigation
    - [ ] Change URL/browsing history
    - [ ] Sanitize arguments, remove duplicates
    - [ ] Thread view
    - [ ] Save query for further use
    - [ ] Use predefined queries
    - [ ] Timeout and re-render on new messages (user configured option)
 3. [ ] Message screen
    - [ ] Sanitize HTML/JS/images

** COMMENT Implementaion plan

   #+begin_quote
   I am sharing my upcoming plans here. After some time, the old sections will be deleted. I am doing 
   this work outside of my working hours or on weekends, as I am very busy with my primary job.
   #+end_quote

*** Maybe Next
**** TODO static resources size?
     :LOGBOOK:
     - State "TODO"       from              [2025-03-20 Thu 07:50]
     :END:

 - I did not expected Bulma to triple its size with 1.x
 - [ ] enable gzip jetty?
 - [ ] May be use postcss and filter out CSS variables as suggested?
 - [ ] what about font awesome? it also adds a lot, may be remove it or keep it downsized?

**** TODO use google icon set?
     :LOGBOOK:
     - State "TODO"       from              [2025-03-08 Sat 19:50]
     :END:
**** NEXT hot reloading
     :LOGBOOK:
     CLOCK: [2025-03-08 Sat 18:32]--[2025-03-09 Sun 07:23] => 12:51
     - State "NEXT"       from "TODO"       [2025-03-07 Fri 20:15]
     - State "TODO"       from              [2025-03-07 Fri 20:15]
     :END:
 - [X] https://tonitalksdev.com/clojure-ring-hot-reloading-html-in-the-browser - Tried, does not work for me!?

**** NEXT Auto-running tests during development
     :LOGBOOK:
     - State "NEXT"       from "TODO"       [2025-03-02 Sun 17:05]
     - State "TODO"       from              [2025-03-02 Sun 11:10]
     :END:

**** TODO ~.env~ or ~edn~ based configuration
     :LOGBOOK:
     - State "TODO"       from              [2025-03-04 Tue 09:25]
     :END:

**** IDEA jetty9?
     :LOGBOOK:
     - State "IDEA"       from              [2025-03-02 Sun 11:20]
     :END:

     What is this and does it provide any additional benifit?
     - [ ] maybe use https://github.com/sunng87/ring-jetty9-adapter ?

**** DONE logging?
     CLOSED: [2025-03-08 Sat 19:50]
     :LOGBOOK:
     - State "DONE"       from "NEXT"       [2025-03-08 Sat 19:50]
     - State "NEXT"       from              [2025-03-02 Sun 11:15]
     :END:

     #+begin_example
     ;; Notes on logging: https://gist.github.com/jacobobryant/76b7a08a07d5ef2cc076b048d078f1f3
     org.slf4j/slf4j-simple     {:mvn/version "2.0.0-alpha5"}
     org.slf4j/log4j-over-slf4j {:mvn/version "1.7.36"}
     org.slf4j/jul-to-slf4j     {:mvn/version "1.7.36"}
     org.slf4j/jcl-over-slf4j   {:mvn/version "1.7.36"}
     #+end_example

*** DONE Bootstraping plan of [2025-03-02 Sun] [100%]
    CLOSED: [2025-03-04 Tue 09:20]
    :LOGBOOK:
    - State "DONE"       from              [2025-03-04 Tue 09:20]
    :END:
**** DONE web server/jetty start
     CLOSED: [2025-03-02 Sun 17:10]
     :LOGBOOK:
     - State "DONE"       from "DELEGATE"   [2025-03-02 Sun 17:10]
     - State "DONE"       from              [2025-03-02 Sun 11:10]
     :END:
**** DONE cider-nrepl
     CLOSED: [2025-03-02 Sun 11:10]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2025-03-02 Sun 11:10]
     - State "TODO"       from              [2025-03-02 Sun 11:10]
     :END:
**** DONE How to reload code during development?
     CLOSED: [2025-03-02 Sun 11:00]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2025-03-02 Sun 11:00]
     - State "TODO"       from              [2025-03-02 Sun 10:55]
     :END:

     Following this advice:
     https://tonitalksdev.com/clojure-ring-hot-reload-server-on-code-changes -- Works!

**** DONE Dev server reload on save
     CLOSED: [2025-03-02 Sun 11:10]
     :LOGBOOK:
     - State "DONE"       from              [2025-03-02 Sun 11:10]
     :END:
**** DONE routing
     CLOSED: [2025-03-02 Sun 11:10]
     :LOGBOOK:
     - State "DONE"       from              [2025-03-02 Sun 11:10]
     :END:

**** DONE Selmer
     CLOSED: [2025-03-02 Sun 14:45]
     :LOGBOOK:
     - State "DONE"       from "WORKING"    [2025-03-02 Sun 14:45]
     CLOCK: [2025-03-02 Sun 14:38]--[2025-03-02 Sun 14:46] =>  0:08
     - State "WORKING"    from "TODO"       [2025-03-02 Sun 11:55]
     - State "TODO"       from              [2025-03-02 Sun 11:10]
     :END:

**** DONE Bulma CSS
     CLOSED: [2025-03-02 Sun 15:25]
     :LOGBOOK:
     - State "DONE"       from "TODO"       [2025-03-02 Sun 15:25]
     - State "TODO"       from              [2025-03-02 Sun 11:10]
     :END:

**** DONE data-star [3/3]
     CLOSED: [2025-03-02 Sun 15:25]
     :LOGBOOK:
     - State "DONE"       from "WORKING"    [2025-03-02 Sun 15:25]
     - State "WORKING"    from "TODO"       [2025-03-02 Sun 11:20]
     CLOCK: [2025-03-02 Sun 11:18]--[2025-03-02 Sun 11:55] =>  0:37
     - State "TODO"       from              [2025-03-02 Sun 11:10]
     :END:

 - [X] Frontend / code / package
 - [X] Rendering static
 - [X] Backend

**** Unsorted

*** TODO Screens [34%]
    :PROPERTIES:
    :COOKIE_DATA: recursive
    :END:
    :LOGBOOK:
    - State "TODO"       from              [2025-03-04 Tue 09:20]
    :END:
**** Messgage list screen [47%]
     :LOGBOOK:
     CLOCK: [2025-03-08 Sat 18:16]--[2025-03-08 Sat 18:16] =>  0:00
     :END:
    
  The concepts of Server Side Events (SSE) allows us to assume that our screen is a function and we should re-render it depending on 
  the state on server.

***** TODO set correct URL & reload to work
      :LOGBOOK:
      - State "TODO"       from              [2025-03-16 Sun 10:05]
      :END:

***** DONE Make paginator async!
      CLOSED: [2025-03-19 Wed 21:55]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2025-03-19 Wed 21:55]
      - State "TODO"       from              [2025-03-14 Fri 21:05]
      :END:

 .. so we won't wait until count finishes. make it finish async
 
 Use *Lazy Load*: https://data-star.dev/examples/lazy_load

***** DONE reset paginator current page to 1 on new search
      CLOSED: [2025-03-19 Wed 22:45]
      :LOGBOOK:
      - State "DONE"       from "WORKING"    [2025-03-19 Wed 22:45]
      - State "WORKING"    from "TODO"       [2025-03-19 Wed 21:55]
      CLOCK: [2025-03-19 Wed 21:56]--[2025-03-19 Wed 21:58] =>  0:02
      - State "TODO"       from              [2025-03-19 Wed 13:50]
      :END:

***** DONE go next/prev page on ~Right~/~Left~
      CLOSED: [2025-03-17 Mon 10:10]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2025-03-17 Mon 10:10]
      - State "TODO"       from              [2025-03-14 Fri 21:10]
      :END:

***** DONE Add cache for ~notmuch count~ because threads counting is resource intensive!
      CLOSED: [2025-03-16 Sun 10:00]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2025-03-16 Sun 10:00]
      - State "TODO"       from              [2025-03-14 Fri 21:05]
      :END:

***** DONE fix issue with additional spaces
      CLOSED: [2025-03-14 Fri 20:35]
      :LOGBOOK:
      - State "DONE"       from "WORKING"    [2025-03-14 Fri 20:35]
      CLOCK: [2025-03-14 Fri 20:27]--[2025-03-14 Fri 20:35] =>  0:08
      - State "WORKING"    from "TODO"       [2025-03-14 Fri 20:25]
      - State "TODO"       from              [2025-03-14 Fri 20:25]
      :END:

***** TODO ðŸ’¾ "Save as" button & functionality
      :LOGBOOK:
      - State "TODO"       from              [2025-03-29 Sat 09:00]
      :END:

***** TODO open message screen on subject click
      :LOGBOOK:
      - State "TODO"       from              [2025-03-14 Fri 20:25]
      :END:

***** WORKING use query arguments
      :LOGBOOK:
      CLOCK: [2025-03-10 Mon 07:32]--[2025-03-10 Mon 09:00] =>  1:28
      CLOCK: [2025-03-09 Sun 07:23]--[2025-03-09 Sun 12:57] =>  5:34
      CLOCK: [2025-03-08 Sat 18:16]--[2025-03-08 Sat 18:32] =>  0:16
      - State "WORKING"    from "TODO"       [2025-03-08 Sat 18:15]
      - State "TODO"       from              [2025-03-08 Sat 18:00]
      :END:

 - [X] use default query arguments
   - How to decode JSON params?
     - https://stackoverflow.com/questions/37397531/ring-read-body-of-a-http-request-as-string
     - 
 - [X] reload part of page on POST
 - [X] reload on SPC
 - [X] paginator page switch logic
 - [X] use paginator argument in rendering!
 - [ ] move out part of code with table to ~defn~!
 - [ ] make sure no code injection is possible due to edn/read!
 - +[ ] enter page number in paginator?+

***** TODO Add settings
      :LOGBOOK:
      - State "TODO"       from              [2025-03-08 Sat 18:00]
      :END:
 - [ ] number of messages per screen
   - [ ] option to match screen size
   - [ ] option to infinite scroll
 - [ ] sort

***** TODO tag to translate unixtime to locatime?
      :LOGBOOK:
      - State "TODO"       from              [2025-03-08 Sat 18:10]
      :END:

***** TODO Thread view (from notmuch show)
      :LOGBOOK:
      - State "TODO"       from              [2025-03-08 Sat 18:05]
      :END:

***** DONE paginator via signal [0/3]
      CLOSED: [2025-03-19 Wed 22:55]
      :LOGBOOK:
      - State "DONE"       from "WORKING"    [2025-03-19 Wed 22:55]
      CLOCK: [2025-03-13 Thu 08:22]--[2025-03-13 Thu 09:20] =>  0:58
      - State "WORKING"    from "TODO"       [2025-03-13 Thu 08:20]
      - State "TODO"       from              [2025-03-13 Thu 08:20]
      :END:

 - [X] change page via signal
   - [X] use effect!
   - +[ ] measure load time!+
 - +[ ] change ... to avg!! and add label!+
 - [ ] adopt query string change

***** DONE paginator
      CLOSED: [2025-03-13 Thu 08:20]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2025-03-13 Thu 08:20]
      - State "TODO"       from              [2025-03-08 Sat 18:05]
      :END:

***** DONE run notmuch search
      CLOSED: [2025-03-08 Sat 18:00]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2025-03-08 Sat 18:00]
      - State "TODO"       from              [2025-03-04 Tue 09:20]
      :END:

***** TODO sanitize all user input!
      :LOGBOOK:
      - State "TODO"       from              [2025-03-12 Wed 09:50]
      :END:

***** IDEA (maybe) re-render when the new message arrives?
      :LOGBOOK:
      - State "IDEA"       from "TODO"       [2025-03-04 Tue 09:20]
      :END:

**** TODO add menu to go home and all other things like select by tag, settings, etc
     :LOGBOOK:
     - State "TODO"       from              [2025-04-05 Sat 17:35]
     :END:
**** WORKING Display message screen [31%]
     :LOGBOOK:
     CLOCK: [2025-03-29 Sat 17:11]--[2025-03-29 Sat 17:20] =>  0:09
     CLOCK: [2025-03-20 Thu 07:57]--[2025-03-20 Thu 09:55] =>  1:58
     - State "WORKING"    from              [2025-03-20 Thu 07:55]
     :END:

***** DONE fix issue with 1st page render (its 2nd?)
      CLOSED: [2025-03-30 Sun 17:25]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2025-03-30 Sun 17:25]
      CLOCK: [2025-03-30 Sun 09:12]--[2025-03-30 Sun 10:22] =>  1:10
      - State "TODO"       from              [2025-03-30 Sun 09:10]
      :END:

***** DONE display text/plain [3/3]
      CLOSED: [2025-03-30 Sun 09:10]
      :LOGBOOK:
      - State "DONE"       from "WORKING"    [2025-03-30 Sun 09:10]
      CLOCK: [2025-03-29 Sat 22:21]--[2025-03-30 Sun 09:11] =>  9:50
      CLOCK: [2025-03-29 Sat 17:20]--[2025-03-29 Sat 22:21] =>  5:01
      CLOCK: [2025-03-29 Sat 17:10]--[2025-03-29 Sat 17:11] =>  0:01
      - State "WORKING"    from              [2025-03-29 Sat 17:10]
      :END:

 - [X] sanitize text - clean up all html tags
 - [X] replace links with a hrefs
 - [X] replace \n with <br>

***** DONE double check all content is present
      CLOSED: [2025-03-30 Sun 18:10]
      :LOGBOOK:
      - State "DONE"       from "WORKING"    [2025-03-30 Sun 18:10]
      CLOCK: [2025-03-30 Sun 17:54]--[2025-03-30 Sun 18:10] =>  0:16
      - State "WORKING"    from "REVIEW"     [2025-03-30 Sun 17:55]
      - State "REVIEW"     from              [2025-03-30 Sun 17:55]
      :END:

***** DONE remove flickering during first render by defaulting to hidden class
      CLOSED: [2025-04-04 Fri 19:55]
      :LOGBOOK:
      - State "DONE"       from "TODO"       [2025-04-04 Fri 19:55]
      - State "TODO"       from              [2025-04-04 Fri 19:50]
      :END:

***** DONE add signals to show/hide parts of content
      CLOSED: [2025-04-04 Fri 20:55]
      :LOGBOOK:
      - State "DONE"       from "WORKING"    [2025-04-04 Fri 20:55]
      CLOCK: [2025-04-04 Fri 20:28]--[2025-04-04 Fri 20:56] =>  0:28
      - State "WORKING"    from "DONE"       [2025-04-04 Fri 19:55]
      - State "DONE"       from "WORKING"    [2025-04-04 Fri 19:55]
      CLOCK: [2025-04-03 Thu 08:30]--[2025-04-03 Thu 10:17] =>  1:47
      CLOCK: [2025-04-03 Thu 07:40]--[2025-04-03 Thu 08:00] =>  0:20
      CLOCK: [2025-04-02 Wed 21:48]--[2025-04-02 Wed 22:20] =>  0:32
      CLOCK: [2025-03-30 Sun 17:54]--[2025-03-30 Sun 17:54] =>  0:00
      - State "WORKING"    from "TODO"       [2025-03-30 Sun 17:55]
      - State "TODO"       from              [2025-03-29 Sat 17:15]
      :END:

 - [X] remove table, use columns
 - [X] use content, check responsive rendering
 - [X] add signals to hide/show based on message N + part N
 - [X] use nice icons to do this (triangle?)

***** TODO limit message list block height
      :LOGBOOK:
      - State "TODO"       from              [2025-04-04 Fri 20:55]
      :END:

 1) [X] Limit only when message cursor is selected and message is shown
 2) [X] highlight currently selected line
 3) [ ] how to report that it is clickable from vimium? may be make subject clickable?

***** TODO cut extremely longs URLs with some trick
      :LOGBOOK:
      - State "TODO"       from              [2025-04-06 Sun 15:25]
      :END:
***** TODO change icon depending on content type
      :LOGBOOK:
      - State "TODO"       from              [2025-04-06 Sun 14:40]
      :END:

***** TODO display images
      :LOGBOOK:
      - State "TODO"       from              [2025-03-29 Sat 17:10]
      :END:

***** TODO display tags as tags
      :LOGBOOK:
      - State "TODO"       from              [2025-04-04 Fri 20:55]
      :END:

***** TODO display text/html
      :LOGBOOK:
      CLOCK: [2025-04-04 Fri 20:56]--[2025-04-05 Sat 08:18] => 11:22
      - State "TODO"       from              [2025-03-29 Sat 17:10]
      :END:

 - [ ] safe filter?
 - [ ] embed images?
 - [ ] new window
 - [ ] iframe

***** TODO make message clickable by vimium
      :LOGBOOK:
      - State "TODO"       from              [2025-04-04 Fri 19:50]
      :END:

***** TODO vertical/horizontal/auto layout
      :LOGBOOK:
      - State "TODO"       from "WORKING"    [2025-03-23 Sun 15:55]
      :END:

***** DONE add tag to pprint/debug json
      CLOSED: [2025-03-29 Sat 17:15]
      :LOGBOOK:
      - State "DONE"       from "WORKING"    [2025-03-29 Sat 17:15]
      :END:

***** TODO vertical/horizontal/auto layout
      :LOGBOOK:
      - State "TODO"       from              [2025-03-29 Sat 17:15]
      :END:
***** WORKING format all parts nicely
***** TODO add top navigation part
      :LOGBOOK:
      - State "TODO"       from              [2025-03-29 Sat 17:15]
      :END:
***** TODO Change color scheme to custom
      :LOGBOOK:
      - State "TODO"       from              [2025-04-05 Sat 12:50]
      :END:
***** TODO Should not include CSS as source? Use some JS stack builder and minimize ?
      :LOGBOOK:
      - State "TODO"       from              [2025-04-05 Sat 12:50]
      :END:
**** TODO Endless scrolling on scroll down
      :LOGBOOK:
      - State "TODO"       from              [2025-03-02 Sun 17:25]
      :END:

***** WORKING First layout: vertical, like in emacs, mesages list
      :LOGBOOK:
      CLOCK: [2025-03-02 Sun 17:50]--[2025-03-02 Sun 18:00] =>  0:10
      - State "WORKING"    from "TODO"       [2025-03-02 Sun 17:50]
      - State "TODO"       from              [2025-03-02 Sun 17:25]
      :END:

 - [ ] Title
 - [ ] List of messages for this screen

***** TODO Search [/]
      
 /Idea: Use ~space~ or ~Enter~ as a signal to query the server./

**** Configuration screen

   Optional, in best case we must be able to show everything based on defaults (default config)

*** TODO Optimize loading
    :LOGBOOK:
    - State "TODO"       from              [2025-03-29 Sat 22:15]
    :END:
**** TODO Follow the LightHouse report of enable text compression etc
     :LOGBOOK:
     - State "TODO"       from              [2025-03-29 Sat 22:15]
     :END:

** License

:PROPERTIES:
:CUSTOM_ID: license
:END:
Copyright Â© 2025 Oleksii Koval

Distributed under the MIT License
